= ALAN Docs Rouge Lexers
Tristano Ajmone <tajmone@gmail.com>
:source-highlighter: rouge
:rouge-style: thankful_eyes
:toclevels: 5
:toc: left
:docinfo: shared-head
:idprefix:
:experimental: true
:icons: font
:linkattrs: true
:reproducible: true
:sectanchors:

Previews of our custom Rouge lexers and themes for the ALAN Docs project, and other ALAN-related documentation.

// CUSTOM ATTRIBUTES:
:manURL: https://alan-if.github.io/alan-docs/manual-alpha/manual.html#

[WARNING]
========================
Currently we only have the ALAN lexer, and a single theme.
In the future this document we'll also cover the other required lexers (BNF) and ALAN themes ("tutorial" and "lib").
========================

== ALAN Samples

A basic ALAN IF code sample, shown in all available theme variations.

[WARNING]
========================
**WIP THEMES!** -- The CSS themes are still incomplete, I need to:

* [ ] Adjust the old Highlight class names to those of Rouge.
* [ ] Add/cover new syntax elements introduced by Rouge.
* [x] Fix some precedence issues which are preventing the custom ALAN themes to override styles from the native Rouge theme.
========================


=== Default Theme

[source,alan]
----------------------
include::sample.alan[]
----------------------


=== Library Theme

[source,alan,role=lib]
----------------------
include::sample.alan[]
----------------------


=== Tutorial Theme

[source,alan,role=tutorial]
----------------------
include::sample.alan[]
----------------------


== ALAN Syntax Details

Here we'll have a closer look at specific syntax elements, and how they are rendered (or hidden) by the various CSS themes for ALAN code.


=== Strings

Here's how strings and their delimiters, along with escapes and interpolations are rendered across themes:

.Default Theme
[source,alan]
----------------------
Say "You carefully inspect $+1; it surely doesn't resemble
     any other $01 you've ever seen, $!1 features are unique.
     $p$iYou tell Bob ""This $1 might be what we were looking for""."
----------------------

.Library Theme
[source,alan,role=lib]
----------------------
Say "You carefully inspect $+1; it surely doesn't resemble
     any other $01 you've ever seen, $!1 features are unique.
     $p$iYou tell Bob ""This $1 might be what we were looking for""."
----------------------

.Tutorial Theme
[source,alan,role=tutorial]
----------------------
Say "You carefully inspect $+1; it surely doesn't resemble
     any other $01 you've ever seen, $!1 features are unique.
     $p$iYou tell Bob ""This $1 might be what we were looking for""."
----------------------


==== Escapes and Interpolations

ALAN's
link:{manURL}_string_statement["`special characters combinations`"^]
are captured as either _escape sequences_ or _interpolations_ by our Rouge lexer.

We capture as escape sequences those special characters groups which are substituted by some fixed literal character (including ``{quot}{quot}``):

.String Escapes: Default Theme
[source,alan]
----------------------------------------
"$$ $_ $i $n $p $t """
----------------------------------------

.String Escapes: Library Theme
[source,alan,role=lib]
---------------------------
"$$ $_ $i $n $p $t """
---------------------------

.String Escapes: Tutorial Theme
[source,alan,role=tutorial]
---------------------------
"$$ $_ $i $n $p $t """
---------------------------


We capture as interpolations those special characters groups which are substituted by some dynamic game-reference:

.String Interpolations: Default Theme
[source,alan]
----------------------------------------
"$1 $+2 $03 $-1 $!2 $a $l $o $v"
----------------------------------------

.String Interpolations: Library Theme
[source,alan,role=lib]
---------------------------
"$1 $+2 $03 $-1 $!2 $a $l $o $v"
---------------------------

.String Interpolations: Tutorial Theme
[source,alan,role=tutorial]
---------------------------
"$1 $+2 $03 $-1 $!2 $a $l $o $v"
---------------------------

[NOTE]
=============
The way these special characters are grouped in the
link:{manURL}_string_statement[_ALAN Manual_^]
differs from the way they are treated by our lexer.

The official documentation doesn't classify them as either escapes or interpolations, and they are presented in two separate groups based on whether they refer to `VERB` parameters or not.

Our approach here is different, for we're trying to classify them as tokens, according to their nature.
The closest token types that I could come up with (and which are supported by Rouge) are _escape sequences_ and _interpolations_, which seem to represent their behaviour fairly accurately.
=============



==== File Names as Quoted IDs

ALAN uses quoted IDs (instead of strings) to hand file names following  `import`, `play` and `show`.
The Rouge ALAN lexer will capture as single-quoted strings quoted IDs representing files names, and capture their enclosing ``{apos}`` as a single-quote string delimiter.


.Default Theme
[source,alan]
---------------------------
IMPORT 'StdLib/library.i'.
PLAY 'mmedia\music.aiff'.
SHOW 'mmedia\picture.jpeg'.
---------------------------

.Library Theme
[source,alan,role=lib]
---------------------------
IMPORT 'StdLib/library.i'.
PLAY 'mmedia\music.aiff'.
SHOW 'mmedia\picture.jpeg'.
---------------------------

.Tutorial Theme
[source,alan,role=tutorial]
---------------------------
IMPORT 'StdLib/library.i'.
PLAY 'mmedia\music.aiff'.
SHOW 'mmedia\picture.jpeg'.
---------------------------




== Other Syntaxes

Code blocks for languages not covered by our custom CSS will fallback to use the native Rouge theme defined via the `:rouge-style:` attribute.
Example, using the `thankful_eyes` theme:

[source,ruby]
----------------------------------
include::custom-rouge-adapter.rb[]
----------------------------------

NOTE: If no theme is specified via `:rouge-style:`, Asciidoctor will default to the `github` theme.

Asciidoctor will convert the native Rouge theme to CSS and inject it in its default CSS stylesheet, which won't interfere with out custom styles and themes.

This is quite convenient, for it ensures that code examples from other languages are also highlighted (i.e. if Rouge has a lexer for that language), and authors of a document are free to choose their fallback theme of choice.

The names of the currently available native Rouge themes are:

[horizontal]
`base16` :: Default base16 theme.
`bw` :: A port of Pygment's "`Black and White`" theme.
`colorful` :: A port of Pygment's "`Colorful`" theme.
`github` :: "`GitHub`" theme.
`gruvbox` :: Based on the https://github.com/morhetz/gruvbox["`gruvbox`"^] theme.
`igorpro` :: "`Igor Pro`".
`magritte` :: "`Magritte`".
`molokai` :: A "`Monokai`" variation.
`monokai.sublime` :: "`Monokai Sublime`", a Monokai variation inspired by Sublime Text.
`monokai` :: "`Monokai`" classic.
`pastie` :: A port of Pygment's "`Pastie`" theme.
`thankful_eyes` :: Thankful Eyes.
`tulip` :: Tulip.


// EOF //
