= ALAN IF Rouge Lexer
Tristano Ajmone <tajmone@gmail.com>
:source-highlighter: rouge
:rouge-style: alan-tester
:toclevels: 5
:toc: left
:idprefix:
:experimental: true
:icons: font
:linkattrs: true
:reproducible: true
:sectanchors:

In this document we'll focus on specific elements of the ALAN syntax, one element per section, in order to check that they are rendered properly by the lexer and theme.
For each element, we'll also mention it's Rouge token name and its corresponding HTML/CSS class.

For better visual inspection, we'll be using a custom Rouge theme here, designed to cover all the syntax elements of the ALAN IF lexer.

// CUSTOM ATTRIBUTES:
:manURL: https://alan-if.github.io/alan-docs/manual-alpha/manual.html#


== Comments

=== Single Line Comments

[horizontal]
Lexer class :: `Comment::Single`
CSS class   :: `c1`


[source,alan]
---------------------------------------
-- just a comment.

Every fruit IsA object.
  Is edible. -- so that it passes the checks of 'eat'!
End Every.
---------------------------------------


[NOTE]
====================
I still haven't understood the difference between `Comment` and `Comment::Single` in Rouge lexers.
The former is described as "Single line comments", the latter as "Comments that end at the end of the line".
Since they map to different CSS classes (`c` and `c1`), I've settled for the latter.
====================


== Keywords


=== Reserved Keywords


[horizontal]
Lexer class :: `Keyword::Reserved`
CSS class   :: `kr`

All ALAN reserved keywords are captured in this group, including the ``=>`` shorthand for `THEN` in Rules.


[source,alan]
---------------------------------------
add after an and are article at attributes before between by can cancel
character characters check container contains count current decrease definite
depend depending describe description directly do does each else elsif empty
end entered event every exclude exit extract first for form from has header
here if import in include increase indefinite indirectly initialize into is isa
it last limits list locate look make max mentioned message meta min name near
nearby negative no not of off on only opaque option options or play prompt
pronoun quit random restart restore save say schedule score script set show
start step stop strip style sum synonyms syntax system taking the then this to
transcript transitively until use verb visits wait when where with word words

=>
---------------------------------------


=== Block Comments

[horizontal]
Lexer class :: `Comment::Multiline`
CSS class   :: `cm`


Block comments were introduced in ALAN Beta8:

[source,alan]
---------------------------------------
////
A block comment.
It's delimited by 4 forward slashes (/).
////

The apple IsA fruit.
End the pear.

//// Anything can follow the opening delimiter! ////////////////////////////////
But the closing delimiter can only be followed by more forward slashes...
//// therefore this is not a closing delimiter!
But the next line is:
////////////////////////////////////////////////////////////////////////////////

The pear IsA fruit.
End the pear.
---------------------------------------


== Numbers

[horizontal]
Lexer class :: `Literal::Number`
CSS class   :: `m`


Numbers (i.e. integers).

[WARNING]
============
Can integers in ALAN be also negative?
And, if so, should we highlight the `-` sign differently?
============

[source,alan]
----------------------------------
If minute Of clock = 59 Then
  Set minute Of clock To 0.
  Increase hour Of clock.
Else
  Increase minute OF clock.
End If.
If level Of bottle = 0 Then
  "You have no water."
Elsif level Of bottle < 5 Then
  "You have almost no water left."
Else
  "You have plenty of water."
End If.
----------------------------------


== Operators

[horizontal]
Lexer class :: `Operator`
CSS class   :: `o`


=== Arithmetic

link:{manURL}_binary_operators[Binary Operators^,title="Learn more in The ALAN Manual"]:


[source,alan]
----------------------------------
+ - * /
----------------------------------

[NOTE]
============================
Ideally, the ``*`` operator must not be preceded by a `)`, or it will be considered a
<<Parameter Indicators,multiple parameter indicator>>:

[source,alan]
-------------
(obj)*
-------------

But since I wasn't able to enforce this, I'm keeping the indicators as part of the operators group, for now.
============================


=== Comparison

link:{manURL}_relational_and_equality_operators[Relational and Equality Operators^,title="Learn more in The ALAN Manual"]:

[source,alan]
----------------------------------
= == <> < > <= >=
----------------------------------

But not `=>`, which is the short hand for the `THEN` keyword in Rules, and should therefore be highlighted as a keyword:

[source,alan]
-------------------------------------
When hero At cave
  => Use Script eat_hero For monster.
End When.
-------------------------------------



=== Indicators

link:{manURL}_indicators[Parameter indicators^,title="Learn more in The ALAN Manual"] are not really operators, but due to technical problems I've added them to the operators group (see the <<Parameter Indicators>> section):

[source,alan]
----------------------
Syntax
  take     = take (obj)*.      -- multiple indicator (*)
  remember = remember (obj)!.  -- omnipotent indicator (!)
----------------------

[WARNING]
===================
Not including the ``!`` indicator among the operators was not really an option, since the  ``*`` indicator was being captured as an operator; so it's better to capture them both, for consistency sake.
===================


== Punctuation

[horizontal]
Lexer class :: `Punctuation`
CSS class   :: `p`


[WARNING]
=======================
I still haven't decided how to handle punctuation.
In the past, we've always highlighted fullstops ``.``, commas ``,`` and colons ``:`` as a keywords, just because of their major role in the ALAN syntax, and because they are referred to as keywords in _The ALAN Manual_.

Technically speaking, these should be handled as all other punctuation marks, but this would mean that we won't be able to colour them like keywords via CSS.
=======================

Just testing how generic punctuation is being highlighted:

[source,alan]
----------------------------------
. , ; : () { }
----------------------------------

[NOTE]
=======================
ALAN doesn't make use of square brackets ``[ ]``.

I don't think it ues semi-colons ``;`` either (need to check this).
=======================


== Parameter Indicators

[horizontal]
Lexer class :: `Operator` (_temporary_)
CSS class   :: `o`


[WARNING]
=======================
I haven't yet decided how to capture the _multiple_ (``*``) and _omnipotent_ (``!``)
link:{manURL}_indicators[parameter indicators^,title="Learn more in The ALAN Manual"],
so for the time being they're caputred as `Operator` tokens.

I wanted to capture them as `Keyword::Pseudo`, but failed to find an easy way to preventing them being captured as `Operator` via lookahead/lookbehind (for some reason, no matter what the rules order, they'll always be captured as operators).
=======================

[source,alan]
----------------------
Syntax
  take     = take (obj)*.      -- multiple indicator (*)
  remember = remember (obj)!.  -- omnipotent indicator (!)
----------------------


== Predefined Classes

[horizontal]
Lexer class :: `Name::Builtin`
CSS class   :: `nb`


There are eight predefined classes in Alan: `entity`, `thing`, `object`, `actor`, `location`, `literal`, `string` and `integer`, all of which receive a dedicated colouring in the syntax.

[source,alan]
---------------------------------------
The worn IsA entity.
End the.

The basement IsA location.
  Description "What a dark and gloomy place!"
End the.

The vampire IsA actor at basement.
End the.

The coffin IsA object at basement.
  Container taking thing.
End the.

Add to every thing
  Verb examine
    Does
      "You examine $+1, but find nothing unusual."
  End verb.
End add to.

Add to every string
  Verb 'say'
    Does
      "You say ""$$" Say This. "$$""!"
  End verb.
End add to.

Add to every integer
  Verb shout
    Does
      "You shout ""$$" Say This. "$$"" out loud!"
  End verb.
End add to.

Add to every literal
  Verb whisper
    Does
      "You whisper ""$$" Say This. "$$""!"
  End verb.
End add to.
---------------------------------------


== Predefined Hero Instance

[horizontal]
Lexer class :: `Name::Other`
CSS class   :: `nx`


The `hero` is a predefined actor (the player) which is hardcoded into every adventure.

[source,alan]
----------------------
Synonyms me = hero.
Synonyms me = HERO.
Synonyms me = Hero.
----------------------


// EOF //
